window.NwsApi=(()=>{"use strict";var t={878:(t,a,s)=>{s.r(a),s.d(a,{Alerts:()=>r,Forecasts:()=>i,Products:()=>e});class r{constructor(t=null,a=null){this._baseUrl="https://api.weather.gov/",this._alertsUrl="alerts",this._activeUrl="/active",this._zoneUrl="/zone",this._pil=a,this._zone=t,this._productArray=null}async byPil(t,a,...s){let r=[];if(this._productArray.features.forEach((t=>{t.properties.parameters.PIL.includes(this._pil)&&r.push(t)})),!a)return r;a(r,...s)}async getAlertsByZone(t,...a){if(!this._zone)return!1;{var s=this._baseUrl+this._alertsUrl+this._activeUrl+this._zoneUrl+"/"+this._zone;const i=await fetch(s);var r=await i.json();if(this._productArray=r,null!==this._pil&&(r=await this.byPil()),!t)return r;t(r,...a)}}}class i{constructor(t,a){this._baseUrl="https://api.weather.gov/",this._pointsUrl="points/",this._gridpointsUrl="gridpoints/",this._fcstHourlyUrl="forecast/hourly",this._fcstSummaryUrl="forecast",this._lat=t,this._lon=a,this._metaData=null,this._rawForecast=null,this._summaryForecast=null,this._hourlyForecast=null}async getRawForecast(t,...a){if(this._rawForecast||await this.queryAPIRawForecast(),!t)return this._rawForecast;t(json,...a)}async getHourlyForecast(t,...a){if(this._hourlyForecast||await this.queryAPIHourlyForecast(),!t)return this._hourlyForecast;t(json,...a)}async getSummaryForecast(t,...a){if(this._summaryForecast||await this.queryAPISummaryForecast(),!t)return this._summaryForecast;t(json,...a)}async getMetaData(){return this._metaData||await this.queryAPIPointMetaData(),this._metaData}get gridX(){return this._metaData.properties.gridX}get gridY(){return this._metaData.properties.gridY}get cwa(){return this._metaData.properties.cwa}async queryAPIPointMetaData(){var t=this,a=this._baseUrl+this._pointsUrl+this._lat+","+this._lon;await $.ajax({url:a,dataType:"json",method:"GET",success:function(a){t._metaData=a}})}async queryAPIRawForecast(t,...a){this._metaData||await this.queryAPIPointMetaData();var s=this._baseUrl+this._gridpointsUrl+this.cwa+"/"+this.gridX+","+this.gridY;const r=await fetch(s),i=await r.json();this._rawForecast=i}async queryAPIHourlyForecast(t,...a){this._metaData||await this.queryAPIPointMetaData();var s=this._baseUrl+this._gridpointsUrl+this.cwa+"/"+this.gridX+","+this.gridY+"/"+this._fcstHourlyUrl;const r=await fetch(s),i=await r.json();this._hourlyForecast=i}async queryAPISummaryForecast(t,...a){this._metaData||await this.queryAPIPointMetaData();var s=this._baseUrl+this._gridpointsUrl+this.cwa+"/"+this.gridX+","+this.gridY+"/"+this._fcstSummaryUrl;const r=await fetch(s),i=await r.json();this._summaryForecast=i}async getForecasts(t,a,...s){let r={};if(t.includes("raw")&&(r.raw=await this.getRawForecast()),t.includes("hourly")&&(r.hourly=await this.getHourlyForecast()),t.includes("summary")&&(r.summary=await this.getSummaryForecast()),!a)return r;a(r,...s)}async getRawWeatherDataBetweenPeriods(t,a,s){this._rawForecast||await this.getRawForecast();let r=this._rawForecast.properties[t].values,i=[],e=[],o=!1;return"quantitativePrecipitation"==t&&(o="split"),r.forEach((t=>{i=i.concat(this.hourlyForecastFromRaw(t,o))})),e=i.filter((t=>{if(t.startDate>=a&&t.endDate<=s)return!0})),e}}class e{constructor(t=null,a=null,s=!1,r=!1,i=!1,e=!1){this._baseUrl="https://api.weather.gov/",this._productsUrl="products",this._locationsUrl="/locations",this._typesUrl="/types",this._type=t,this._wfo=a,this._idx=s,this._limit=r,this._startDate=i,this._endDate=e,this._productArray=null}async byIndex(t,a,...s){let r={};if(0!==this._productArray["@graph"].length){var i=this._productArray["@graph"][this._idx]["@id"];const t=await fetch(i);r=await t.json()}if(!a)return r;a(r,...s)}async bySubset(t,a,...s){let r=[],i=this._productArray["@graph"];if(0!==i.length&&(this._startDate&&(i=i.filter((t=>this._startDate<new Date(t.issuanceTime)))),this._endDate&&(i=i.filter((t=>this._endDate>new Date(t.issuanceTime)))),this._limit&&(i=i.slice(0,this._limit)),r=await Promise.all(i.map((async t=>{var a=t["@id"];return(await fetch(a)).json()})))),!a)return r;a(r,...s)}async getProductsByLocationAndType(t,...a){if(!this._type||!this._wfo)return!1;{var s=this._baseUrl+this._productsUrl+this._typesUrl+"/"+this._type+this._locationsUrl+"/"+this._wfo;const i=await fetch(s);var r=await i.json();let e;if(this._productArray=r,e=!1!==this._idx?await this.byIndex():await this.bySubset(),!t)return e;t(e,...a)}}}console.log(r),console.log("TEST1"),console.log(new r),console.log("TEST2")}},a={};function s(r){if(a[r])return a[r].exports;var i=a[r]={exports:{}};return t[r](i,i.exports,s),i.exports}return s.d=(t,a)=>{for(var r in a)s.o(a,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:a[r]})},s.o=(t,a)=>Object.prototype.hasOwnProperty.call(t,a),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(878)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,